package rules;

import java.util.Calendar
import java.util.Date
import java.text.SimpleDateFormat
import webshop.entity.Receipt;
import webshop.entity.ReceiptItem;
import webshop.entity.ReceiptItemDiscount;
import webshop.entity.Product;
import webshop.entity.ProductCategory;
import webshop.entity.ActionSale;

function boolean checkDate(String date, int numberOfDays) {
	Calendar calendar = Calendar.getInstance(); 
	calendar.add(Calendar.DAY_OF_MONTH, numberOfDays);
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	if(date != null && !sdf.parse(date).before(calendar.getTime())) {
		return true;
	}
  	return false;
}

function boolean compareDates(String date1, String date2) {
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	if(!sdf.parse(date1).before(sdf.parse(date2))) {
		return true;
	}
  	return false;
}

/*osnovni popust od 10% za stavku ukoliko se u njoj narucuje vise od 20 artikala, a artikal ne pripada kategoriji siroke potrosnje	*/
rule "Basic discount of 10%"
	when 
		receiptItem: ReceiptItem(amount > 20 && product.category.code != "1234")
		eval(receiptItem.getDiscounts().size() == 0)
	then
		receiptItem.addDiscount(new ReceiptItemDiscount(receiptItem.getProduct().getCode() + receiptItem.getDiscounts().size(), receiptItem, 10.0, true));
	end

//osnovni popust od 7% za stavku ukoliko ukupna narucena vrijednost stavke prelazi 5000 i ukoliko njen artikal pripada kategoriji siroke potrosnje
rule "Basic discount of 7%"
	when 
		receiptItem: ReceiptItem(originalTotalPrize > 5000 && product.category.code == "1234")
		eval(receiptItem.getDiscounts().size() == 0)
	then
		receiptItem.addDiscount(new ReceiptItemDiscount(receiptItem.getProduct().getCode() + receiptItem.getDiscounts().size(), receiptItem, 7.0, true));
	end
	
	
//osnovni popust od 5% za stavku ukoliko se u njoj narucuje vise od 5 artikala, a artikal pripada kategoriji, televizori, racunari ili laptopovi	
rule "Basic discount of 5%"
	when 
		receiptItem: ReceiptItem(amount > 5 && (product.category.code == "123a" || product.category.code == "123b" || product.category.code == "123c"))
		 eval(receiptItem.getDiscounts().size() == 0)
	then
		receiptItem.addDiscount(new ReceiptItemDiscount(receiptItem.getProduct().getCode() + receiptItem.getDiscounts().size(), receiptItem, 5.0, true));
	end

//dodatni popust od 2% za stavku ukoliko je artikal iz stavke vec kupovan u prethodnih 15 dana	
rule "Additional discount of 2%"
	when
		receiptItem : ReceiptItem()
		eval(checkDate(receiptItem.getProduct().getLastPurchaseDate(), -15))
	then
		receiptItem.addDiscount(new ReceiptItemDiscount(receiptItem.getProduct().getCode() + receiptItem.getDiscounts().size(), receiptItem, 2.0, false));
end

//dodatni popust od 1%  za stavku ukoliko su proizvodi iz kategorije tog artikla kupovani u prethodnih 30 dana
rule "Additional discount of 1%"
	when
		receiptItem : ReceiptItem()
		eval(checkDate(receiptItem.getProduct().getCategory().getLastPurchaseDate(), -30))
	then
		receiptItem.addDiscount(new ReceiptItemDiscount(receiptItem.getProduct().getCode() + receiptItem.getDiscounts().size(), receiptItem, 1.0, false));
end

//Ukoliko datum narudzbenice pripada nekom vremenskom periodu akcijskog dogadjaja i ukoliko za artikal iz stavke njegova kategorija pripada listi kategorija za koje se akcijski događaj definiše, tada kreiraj dodatni popust za stavku. 
rule "Additional discount based on action sales"
	when
		receiptItem : ReceiptItem()
		actionSale : ActionSale(productCategories : productCategories) 
		ProductCategory(id == receiptItem.product.category.id || (receiptItem.product.category.parentCategory != null && receiptItem.product.category.parentCategory.id == id)) from productCategories
		eval(compareDates(receiptItem.getReceipt().getDate(), actionSale.getStartDate()))
		eval(compareDates(actionSale.getEndDate(), receiptItem.getReceipt().getDate()))
	then
		receiptItem.addDiscount(new ReceiptItemDiscount(receiptItem.getProduct().getCode() + receiptItem.getDiscounts().size(), receiptItem, actionSale.getDiscountPercentage(), false));
end
//Za stavku računa saberi sve popuste (osnovni + svi dodatni) koji su za nju definisani.
rule "Sum all discounts"
	when 
		receiptItem : ReceiptItem(id == id)
	then
		for(int i = 0; i < receiptItem.getDiscounts().size(); i++) {
			receiptItem.setDiscountPercentage(receiptItem.getDiscountPercentage() + Double.parseDouble(receiptItem.getDiscounts().get(i).getPercentage().toString()));
		}
end
	

rule "Set discount to maximum if over"
	when
		receiptItem : ReceiptItem()
		eval(receiptItem.getDiscountPercentage() > Double.parseDouble(receiptItem.getProduct().getCategory().getMaximumDiscount().toString()))
	then
		receiptItem.setDiscountPercentage(Double.parseDouble(receiptItem.getProduct().getCategory().getMaximumDiscount().toString()));
end

rule "Calculate final prize"
	when 
		receiptItem : ReceiptItem(id == id)
	then
		receiptItem.setFinalTotalPrize(receiptItem.getProductPrize() * receiptItem.getAmount() - receiptItem.getProductPrize() * receiptItem.getAmount() * receiptItem.getDiscountPercentage()*0.01);
end



		
	
